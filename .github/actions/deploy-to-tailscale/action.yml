name: "Deploy to Tailscale Server"
description: "Deploys a repository to a Tailscale server with systemd service management"
inputs:
  server_ip:
    description: "IP or hostname of the server"
    required: true
  ssh_user:
    description: "SSH user name"
    required: true
  ts_oauth_client_id:
    description: "Tailscale OAuth Client ID"
    required: true
  ts_oauth_secret:
    description: "Tailscale OAuth Secret"
    required: true
  tags:
    description: "Tags for Tailscale"
    required: true
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v2

    - name: Tailscale
      uses: tailscale/github-action@v2
      with:
        oauth-client-id: ${{ inputs.ts_oauth_client_id }}
        oauth-secret: ${{ inputs.ts_oauth_secret }}
        tags: ${{ inputs.tags }}

    - name: Deploy to Server
      env:
        SERVER_IP: ${{ inputs.server_ip }}
        SSH_USER: ${{ inputs.ssh_user }}
      shell: bash
      run: |
        # Verify connection variables
        if [ -z "$SERVER_IP" ] || [ -z "$SSH_USER" ]; then
          echo "Error: Environment variables SERVER_IP or SSH_USER are not set"
          exit 1
        fi

        # Set up connection details
        CONNECTION="$SSH_USER@$SERVER_IP"
        echo "Attempting to connect to $CONNECTION"

        # Test SSH connection first
        if ! ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 $CONNECTION 'echo "SSH connection successful"'; then
          echo "Error: Cannot establish SSH connection"
          exit 1
        fi

        # Create a temporary service file (adds ExecReload for graceful deploy)
        echo "[Unit]
        Description=StartUp Service for %I

        [Service]
        Type=simple
        ExecStart=/bin/bash -l -c \"%h/%i/init.sh\"
        ExecReload=/bin/bash -l -c \"REPO_DIR=%h/%i %h/%i/pre-reload.sh\"
        WorkingDirectory=%h/%i
        Restart=on-failure
        RestartSec=5s
        TimeoutStopSec=30
        KillMode=process

        [Install]
        WantedBy=default.target" > service.tmp

        # Set repository name
        REPO_NAME=$(echo "${{ github.repository }}" | cut -d "/" -f2)
        echo "Setting up repository: $REPO_NAME"

        # Create systemd user directory and transfer service file
        ssh -o StrictHostKeyChecking=no $CONNECTION "mkdir -p ~/.config/systemd/user"
        scp -o StrictHostKeyChecking=no service.tmp "$CONNECTION:~/.config/systemd/user/startup-deployed@.service"
        rm service.tmp

        # Deploy repository and service
        ssh -o StrictHostKeyChecking=no $CONNECTION "
          set -e
          systemctl --user daemon-reload
          if [ ! -d ~/$REPO_NAME ]; then
            echo 'Cloning repository...'
            git clone https://github.com/${{ github.repository }} ~/$REPO_NAME
            cd ~/$REPO_NAME
          else
            echo 'Updating existing repository...'
            cd ~/$REPO_NAME
            git fetch
            git reset --hard HEAD
            git pull
          fi
          # Configure git to ignore file mode changes locally
          git config core.fileMode false

          # Ensure scripts are executable (pre-reload.sh only if present)
          chmod +x init.sh || true
          if [ -f pre-reload.sh ]; then
            chmod +x pre-reload.sh || true
            HAS_PRERELOAD=1
          else
            HAS_PRERELOAD=0
          fi

          # Ensure service is enabled
          systemctl --user enable startup-deployed@$REPO_NAME.service

          # Decide start/reload strategy
          if systemctl --user is-active --quiet startup-deployed@$REPO_NAME.service; then
            if [ "$HAS_PRERELOAD" -eq 1 ]; then
              echo 'pre-reload.sh found: graceful reload'
              systemctl --user reload startup-deployed@$REPO_NAME.service || true
            else
              echo 'pre-reload.sh not found: falling back to restart'
              systemctl --user restart startup-deployed@$REPO_NAME.service || true
            fi
          else
            echo 'Service not active: starting now'
            systemctl --user start startup-deployed@$REPO_NAME.service
          fi

          echo 'Deployment completed successfully'"
